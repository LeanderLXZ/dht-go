// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: rpc.proto

package src

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Structure of a Node
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NodeId  []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

// Node Id
type NodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *NodeId) Reset() {
	*x = NodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeId) ProtoMessage() {}

func (x *NodeId) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeId.ProtoReflect.Descriptor instead.
func (*NodeId) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *NodeId) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

// Add a (key, value) pair - Request
type AddKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AddKeyReq) Reset() {
	*x = AddKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyReq) ProtoMessage() {}

func (x *AddKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyReq.ProtoReflect.Descriptor instead.
func (*AddKeyReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *AddKeyReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddKeyReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Add a (key, value) pair - Response
type AddKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddKeyResp) Reset() {
	*x = AddKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyResp) ProtoMessage() {}

func (x *AddKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyResp.ProtoReflect.Descriptor instead.
func (*AddKeyResp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

// Get the value ginven a key - Request
type GetValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetValueReq) Reset() {
	*x = GetValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueReq) ProtoMessage() {}

func (x *GetValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueReq.ProtoReflect.Descriptor instead.
func (*GetValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetValueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Get the value ginven a key - Response
type GetValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetValueResp) Reset() {
	*x = GetValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueResp) ProtoMessage() {}

func (x *GetValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueResp.ProtoReflect.Descriptor instead.
func (*GetValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetValueResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Structure of (key, value) pairs
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Get keys from a given range - Request
type GetKeysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetKeysReq) Reset() {
	*x = GetKeysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeysReq) ProtoMessage() {}

func (x *GetKeysReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeysReq.ProtoReflect.Descriptor instead.
func (*GetKeysReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetKeysReq) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetKeysReq) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// Get keys from a given range - Response
type GetKeysResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvs []*KeyValuePair `protobuf:"bytes,1,rep,name=kvs,proto3" json:"kvs,omitempty"`
}

func (x *GetKeysResp) Reset() {
	*x = GetKeysResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeysResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeysResp) ProtoMessage() {}

func (x *GetKeysResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeysResp.ProtoReflect.Descriptor instead.
func (*GetKeysResp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetKeysResp) GetKvs() []*KeyValuePair {
	if x != nil {
		return x.Kvs
	}
	return nil
}

// Delete a given key - Request
type DeleteKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteKeyReq) Reset() {
	*x = DeleteKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyReq) ProtoMessage() {}

func (x *DeleteKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyReq.ProtoReflect.Descriptor instead.
func (*DeleteKeyReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteKeyReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Delete a given key - Response
type DeleteKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKeyResp) Reset() {
	*x = DeleteKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyResp) ProtoMessage() {}

func (x *DeleteKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyResp.ProtoReflect.Descriptor instead.
func (*DeleteKeyResp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

// Delete multiple keys - Request
type DeleteKeysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *DeleteKeysReq) Reset() {
	*x = DeleteKeysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeysReq) ProtoMessage() {}

func (x *DeleteKeysReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeysReq.ProtoReflect.Descriptor instead.
func (*DeleteKeysReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteKeysReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Delete multiple keys - Response
type DeleteKeysResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKeysResp) Reset() {
	*x = DeleteKeysResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeysResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeysResp) ProtoMessage() {}

func (x *DeleteKeysResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeysResp.ProtoReflect.Descriptor instead.
func (*DeleteKeysResp) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{12}
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{13}
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x72, 0x63,
	0x22, 0x38, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x1f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x24, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0xc4, 0x04, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x41,
	0x64, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x0f, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x72,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x09,
	0x2e, 0x73, 0x72, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x2e, 0x73, 0x72,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x73, 0x72, 0x63,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x73, 0x72, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x09, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x09, 0x2e, 0x73, 0x72,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_rpc_proto_goTypes = []interface{}{
	(*Node)(nil),           // 0: src.Node
	(*NodeId)(nil),         // 1: src.NodeId
	(*AddKeyReq)(nil),      // 2: src.AddKeyReq
	(*AddKeyResp)(nil),     // 3: src.AddKeyResp
	(*GetValueReq)(nil),    // 4: src.GetValueReq
	(*GetValueResp)(nil),   // 5: src.GetValueResp
	(*KeyValuePair)(nil),   // 6: src.KeyValuePair
	(*GetKeysReq)(nil),     // 7: src.GetKeysReq
	(*GetKeysResp)(nil),    // 8: src.GetKeysResp
	(*DeleteKeyReq)(nil),   // 9: src.DeleteKeyReq
	(*DeleteKeyResp)(nil),  // 10: src.DeleteKeyResp
	(*DeleteKeysReq)(nil),  // 11: src.DeleteKeysReq
	(*DeleteKeysResp)(nil), // 12: src.DeleteKeysResp
	(*EmptyRequest)(nil),   // 13: src.EmptyRequest
}
var file_rpc_proto_depIdxs = []int32{
	6,  // 0: src.GetKeysResp.kvs:type_name -> src.KeyValuePair
	2,  // 1: src.DistributedHashTable.AddKey:input_type -> src.AddKeyReq
	4,  // 2: src.DistributedHashTable.GetValue:input_type -> src.GetValueReq
	7,  // 3: src.DistributedHashTable.GetKeys:input_type -> src.GetKeysReq
	9,  // 4: src.DistributedHashTable.DeleteKey:input_type -> src.DeleteKeyReq
	11, // 5: src.DistributedHashTable.DeleteKeys:input_type -> src.DeleteKeysReq
	0,  // 6: src.DistributedHashTable.SetPreNode:input_type -> src.Node
	0,  // 7: src.DistributedHashTable.SetNextNode:input_type -> src.Node
	13, // 8: src.DistributedHashTable.GetPreNode:input_type -> src.EmptyRequest
	13, // 9: src.DistributedHashTable.GetNextNode:input_type -> src.EmptyRequest
	1,  // 10: src.DistributedHashTable.CheckPreNodeById:input_type -> src.NodeId
	1,  // 11: src.DistributedHashTable.GetNextNodeById:input_type -> src.NodeId
	0,  // 12: src.DistributedHashTable.Inform:input_type -> src.Node
	3,  // 13: src.DistributedHashTable.AddKey:output_type -> src.AddKeyResp
	5,  // 14: src.DistributedHashTable.GetValue:output_type -> src.GetValueResp
	8,  // 15: src.DistributedHashTable.GetKeys:output_type -> src.GetKeysResp
	10, // 16: src.DistributedHashTable.DeleteKey:output_type -> src.DeleteKeyResp
	12, // 17: src.DistributedHashTable.DeleteKeys:output_type -> src.DeleteKeysResp
	13, // 18: src.DistributedHashTable.SetPreNode:output_type -> src.EmptyRequest
	13, // 19: src.DistributedHashTable.SetNextNode:output_type -> src.EmptyRequest
	0,  // 20: src.DistributedHashTable.GetPreNode:output_type -> src.Node
	0,  // 21: src.DistributedHashTable.GetNextNode:output_type -> src.Node
	13, // 22: src.DistributedHashTable.CheckPreNodeById:output_type -> src.EmptyRequest
	0,  // 23: src.DistributedHashTable.GetNextNodeById:output_type -> src.Node
	13, // 24: src.DistributedHashTable.Inform:output_type -> src.EmptyRequest
	13, // [13:25] is the sub-list for method output_type
	1,  // [1:13] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeysResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeysResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DistributedHashTableClient is the client API for DistributedHashTable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributedHashTableClient interface {
	AddKey(ctx context.Context, in *AddKeyReq, opts ...grpc.CallOption) (*AddKeyResp, error)
	GetValue(ctx context.Context, in *GetValueReq, opts ...grpc.CallOption) (*GetValueResp, error)
	GetKeys(ctx context.Context, in *GetKeysReq, opts ...grpc.CallOption) (*GetKeysResp, error)
	DeleteKey(ctx context.Context, in *DeleteKeyReq, opts ...grpc.CallOption) (*DeleteKeyResp, error)
	DeleteKeys(ctx context.Context, in *DeleteKeysReq, opts ...grpc.CallOption) (*DeleteKeysResp, error)
	SetPreNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error)
	SetNextNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error)
	GetPreNode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Node, error)
	GetNextNode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Node, error)
	CheckPreNodeById(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*EmptyRequest, error)
	GetNextNodeById(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Node, error)
	Inform(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error)
}

type distributedHashTableClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedHashTableClient(cc grpc.ClientConnInterface) DistributedHashTableClient {
	return &distributedHashTableClient{cc}
}

func (c *distributedHashTableClient) AddKey(ctx context.Context, in *AddKeyReq, opts ...grpc.CallOption) (*AddKeyResp, error) {
	out := new(AddKeyResp)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/AddKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) GetValue(ctx context.Context, in *GetValueReq, opts ...grpc.CallOption) (*GetValueResp, error) {
	out := new(GetValueResp)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) GetKeys(ctx context.Context, in *GetKeysReq, opts ...grpc.CallOption) (*GetKeysResp, error) {
	out := new(GetKeysResp)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) DeleteKey(ctx context.Context, in *DeleteKeyReq, opts ...grpc.CallOption) (*DeleteKeyResp, error) {
	out := new(DeleteKeyResp)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) DeleteKeys(ctx context.Context, in *DeleteKeysReq, opts ...grpc.CallOption) (*DeleteKeysResp, error) {
	out := new(DeleteKeysResp)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/DeleteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) SetPreNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/SetPreNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) SetNextNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/SetNextNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) GetPreNode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/GetPreNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) GetNextNode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/GetNextNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) CheckPreNodeById(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/CheckPreNodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) GetNextNodeById(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/GetNextNodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedHashTableClient) Inform(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/src.DistributedHashTable/Inform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedHashTableServer is the server API for DistributedHashTable service.
type DistributedHashTableServer interface {
	AddKey(context.Context, *AddKeyReq) (*AddKeyResp, error)
	GetValue(context.Context, *GetValueReq) (*GetValueResp, error)
	GetKeys(context.Context, *GetKeysReq) (*GetKeysResp, error)
	DeleteKey(context.Context, *DeleteKeyReq) (*DeleteKeyResp, error)
	DeleteKeys(context.Context, *DeleteKeysReq) (*DeleteKeysResp, error)
	SetPreNode(context.Context, *Node) (*EmptyRequest, error)
	SetNextNode(context.Context, *Node) (*EmptyRequest, error)
	GetPreNode(context.Context, *EmptyRequest) (*Node, error)
	GetNextNode(context.Context, *EmptyRequest) (*Node, error)
	CheckPreNodeById(context.Context, *NodeId) (*EmptyRequest, error)
	GetNextNodeById(context.Context, *NodeId) (*Node, error)
	Inform(context.Context, *Node) (*EmptyRequest, error)
}

// UnimplementedDistributedHashTableServer can be embedded to have forward compatible implementations.
type UnimplementedDistributedHashTableServer struct {
}

func (*UnimplementedDistributedHashTableServer) AddKey(context.Context, *AddKeyReq) (*AddKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (*UnimplementedDistributedHashTableServer) GetValue(context.Context, *GetValueReq) (*GetValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (*UnimplementedDistributedHashTableServer) GetKeys(context.Context, *GetKeysReq) (*GetKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (*UnimplementedDistributedHashTableServer) DeleteKey(context.Context, *DeleteKeyReq) (*DeleteKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (*UnimplementedDistributedHashTableServer) DeleteKeys(context.Context, *DeleteKeysReq) (*DeleteKeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeys not implemented")
}
func (*UnimplementedDistributedHashTableServer) SetPreNode(context.Context, *Node) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreNode not implemented")
}
func (*UnimplementedDistributedHashTableServer) SetNextNode(context.Context, *Node) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextNode not implemented")
}
func (*UnimplementedDistributedHashTableServer) GetPreNode(context.Context, *EmptyRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreNode not implemented")
}
func (*UnimplementedDistributedHashTableServer) GetNextNode(context.Context, *EmptyRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextNode not implemented")
}
func (*UnimplementedDistributedHashTableServer) CheckPreNodeById(context.Context, *NodeId) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPreNodeById not implemented")
}
func (*UnimplementedDistributedHashTableServer) GetNextNodeById(context.Context, *NodeId) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextNodeById not implemented")
}
func (*UnimplementedDistributedHashTableServer) Inform(context.Context, *Node) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inform not implemented")
}

func RegisterDistributedHashTableServer(s *grpc.Server, srv DistributedHashTableServer) {
	s.RegisterService(&_DistributedHashTable_serviceDesc, srv)
}

func _DistributedHashTable_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/AddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).AddKey(ctx, req.(*AddKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).GetValue(ctx, req.(*GetValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).GetKeys(ctx, req.(*GetKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).DeleteKey(ctx, req.(*DeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/DeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).DeleteKeys(ctx, req.(*DeleteKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_SetPreNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).SetPreNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/SetPreNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).SetPreNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_SetNextNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).SetNextNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/SetNextNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).SetNextNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_GetPreNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).GetPreNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/GetPreNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).GetPreNode(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_GetNextNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).GetNextNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/GetNextNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).GetNextNode(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_CheckPreNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).CheckPreNodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/CheckPreNodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).CheckPreNodeById(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_GetNextNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).GetNextNodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/GetNextNodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).GetNextNodeById(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedHashTable_Inform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedHashTableServer).Inform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.DistributedHashTable/Inform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedHashTableServer).Inform(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributedHashTable_serviceDesc = grpc.ServiceDesc{
	ServiceName: "src.DistributedHashTable",
	HandlerType: (*DistributedHashTableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKey",
			Handler:    _DistributedHashTable_AddKey_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _DistributedHashTable_GetValue_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _DistributedHashTable_GetKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _DistributedHashTable_DeleteKey_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _DistributedHashTable_DeleteKeys_Handler,
		},
		{
			MethodName: "SetPreNode",
			Handler:    _DistributedHashTable_SetPreNode_Handler,
		},
		{
			MethodName: "SetNextNode",
			Handler:    _DistributedHashTable_SetNextNode_Handler,
		},
		{
			MethodName: "GetPreNode",
			Handler:    _DistributedHashTable_GetPreNode_Handler,
		},
		{
			MethodName: "GetNextNode",
			Handler:    _DistributedHashTable_GetNextNode_Handler,
		},
		{
			MethodName: "CheckPreNodeById",
			Handler:    _DistributedHashTable_CheckPreNodeById_Handler,
		},
		{
			MethodName: "GetNextNodeById",
			Handler:    _DistributedHashTable_GetNextNodeById_Handler,
		},
		{
			MethodName: "Inform",
			Handler:    _DistributedHashTable_Inform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
